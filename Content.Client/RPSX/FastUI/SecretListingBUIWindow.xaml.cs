using Content.Client.RPSX.Utils;
using Content.Shared.RPSX.FastUI;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using static Content.Shared.FastUI.SecretListingEUIState;

namespace Content.Client.RPSX.FastUI;

[GenerateTypedNameReferences]
public sealed partial class SecretListingBUIWindow : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    private readonly SpriteSystem _spriteSystem = default!;

    public event Action<BaseButton.ButtonEventArgs, ListingData, string>? OnListingButtonPressed;

    public SecretListingBUIWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _spriteSystem = _entityManager.EntitySysManager.GetEntitySystem<SpriteSystem>();
    }

    public void UpdateStateByListing(SecretListingInitState state)
    {
        var prototype = state.Prototype;
        UpdateByPrototype(prototype, state.UserEntity);
    }

    public void UpdateStateByData(SecretListingInitDataState state)
    {
        Title = state.WindowName;
        WindowDescription.SetMessage(state.WindowDescription);

        StoreListingsContainer.Children.Clear();
        foreach (var (data, index) in state.Data.WithIndex())
        {
            var newListing = new SecretListingListing(data, state.Key, _spriteSystem, _entityManager, index);
            newListing.OnListingButtonPressed += OnListingButtonPressed;

            StoreListingsContainer.AddChild(newListing);
        }
    }

    public void UpdateStateByDataEUI(SecretListingEUIInitState state)
    {
        var prototype = state.Prototype;
        UpdateByPrototype(prototype, state.NetEntity);
    }

    private void UpdateByPrototype(SecretListingCategoryPrototype prototype, NetEntity entityUid)
    {
        var data = new List<ListingData>();
        foreach (var id in prototype.Listings)
        {
            var item = _prototypeManager.Index<SecretListingPrototype>(id);
            var listing = new ListingData
            (
                item.ID,
                item.Title,
                item.Description,
                item.SubDescription,
                item.ButtonText,
                item.ButtonState.ToButtonState(),
                item.Icon
            );

            data.Add(listing);
        }

        UpdateStateByData(new SecretListingInitDataState(prototype.ID, data, prototype.WindowName, prototype.WindowDescription, prototype.SelectMode, entityUid));
    }
}
