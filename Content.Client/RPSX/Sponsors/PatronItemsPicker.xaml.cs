using System.Linq;
using Content.Shared.RPSX.Patron;
using Content.Shared.RPSX.Sponsors;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;

namespace Content.Client.RPSX.Sponsors;

[GenerateTypedNameReferences]
public sealed partial class PatronItemsPicker : Control
{
    [Dependency] private readonly ISponsorsManager _sponsorsManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeMan = default!;
    [Dependency] private readonly IResourceCache _resource = default!;
    [Dependency] private readonly IEntityManager _entMan = default!;

    public Action<List<string>>? ItemsChanged;
    public Action<string, string>? PetChanged;

    private ItemList.Item? _selectedUiItem;
    private ItemList.Item? _selectedUiUsedItem;

    private List<EntityPrototype> _selectedItems = [];
    private List<SponsorsItemsCategory> _categories = [];

    private (string, string)? _selectedPet;
    private EntityUid? _dummyPetPreview;
    private SponsorsItemsCategory? _activeCategory;

    private SponsorTier? _tier;

    public PatronItemsPicker()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        InitializeItems();
        InitializePets();
    }

    public void SetPatronData(List<string> selectedItems, string petId, string petName)
    {
        _sponsorsManager.TryGetSponsorTier(out var sponsorInfo);
        _tier = sponsorInfo;

        SetupPatronItems(selectedItems);
        SetupPatronPets(petId, petName);
    }

    private void SetupPatronItems(List<string> selectedItems)
    {
        var tierAvailableItems = _tier?.AvailableItems;
        if (tierAvailableItems > 0)
        {
            _selectedItems = selectedItems.Select(item => _prototypeMan.Index<EntityPrototype>(item)).ToList();

            UpdateSelectedItems();
            PopulateCategoryItems(CSearch.Text);

            return;
        }

        CPatronCategoryItems.Visible = true;
        CPatronItemsContainer.Visible = false;
    }

    private void UpdateSelectedItems()
    {
        CPatronSelectedItems.Clear();

        foreach (var itemProt in _selectedItems)
        {
            var spriteTextures = SpriteComponent.GetPrototypeTextures(itemProt, _resource).First();
            var sprite = spriteTextures.Default;

            var item = CPatronSelectedItems.AddItem(itemProt.Name, sprite);
            item.Metadata = itemProt;
        }

        UpdateAvailableItemsCount();
    }

    private void UpdateAvailableItemsCount()
    {
        var availableItems = _tier?.AvailableItems - _selectedItems.Count;
        CPatronItemsAvailableCount.Text = $"{availableItems}";
        CPatronAddItem.Disabled = availableItems <= 0;
    }

    private void SetupPatronPets(string petId, string petName)
    {
        if (_tier?.PetCategories.Count > 0)
        {
            if (!string.IsNullOrEmpty(petId))
            {
                _selectedPet = (petId, petName);
                CPetName.Text = petName;
                UpdatePetSprite(petId);
            }

            PopulatePets("");
            return;
        }

        CPatronCategoryPet.Visible = true;
        CPatronPetContainer.Visible = false;
    }

    #region Items

    private void InitializeItems()
    {
        CPatronItemsCategory.OnItemSelected += OnItemsCategoryChanged;

        CSearch.OnTextChanged += args => PopulateCategoryItems(args.Text);

        CPatronAvailableItems.OnItemSelected += args => _selectedUiItem = CPatronAvailableItems[args.ItemIndex];
        CPatronSelectedItems.OnItemSelected += args => _selectedUiUsedItem = CPatronSelectedItems[args.ItemIndex];

        CPatronAddItem.OnPressed += _ => AddItem();
        CPatronRemoveItem.OnPressed += _ => RemoveItem();

        LoadItems();
    }

    private void OnItemsCategoryChanged(OptionButton.ItemSelectedEventArgs category)
    {
        CPatronItemsCategory.SelectId(category.Id);

        _activeCategory = _categories[category.Id];
        PopulateCategoryItems(CSearch.Text);
    }

    private void LoadItems()
    {
        _categories = _prototypeMan
            .EnumeratePrototypes<SponsorsItemsCategory>()
            .ToList();

        foreach (var category in _categories)
        {
            CPatronItemsCategory.AddItem(category.Name);
        }

        PopulateCategoryItems(CSearch.Text);
    }

    private void AddItem()
    {
        if (_selectedUiItem == null)
            return;

        CPatronAvailableItems.Remove(_selectedUiItem);

        var item = new ItemList.Item(CPatronSelectedItems)
        {
            Text = _selectedUiItem.Text,
            Icon = _selectedUiItem.Icon,
            Metadata = _selectedUiItem.Metadata
        };
        CPatronSelectedItems.Insert(0, item);

        if (item.Metadata is { } metadata)
        {
            _selectedItems.Add((EntityPrototype) metadata);
            UpdateSelectedItems();
        }

        _selectedUiItem = null;

        UpdateAvailableItemsCount();
        OnItemsChanged();
    }

    private void RemoveItem()
    {
        if (_selectedUiUsedItem == null)
            return;

        CPatronSelectedItems.Remove(_selectedUiUsedItem);

        var item = new ItemList.Item(CPatronAvailableItems)
        {
            Text = _selectedUiUsedItem.Text,
            Icon = _selectedUiUsedItem.Icon,
            Metadata = _selectedUiUsedItem.Metadata
        };

        if (item.Metadata is EntityPrototype prototype)
        {
            _selectedItems.Remove(prototype);

            if (_activeCategory?.Items.Contains(prototype.ID) == true)
            {
                PopulateCategoryItems(CSearch.Text);
            }

            UpdateSelectedItems();
        }

        _selectedUiUsedItem = null;

        UpdateAvailableItemsCount();
        OnItemsChanged();
    }

    private void OnItemsChanged()
    {
        var items = _selectedItems.Select(item => item.ID).ToList();
        ItemsChanged?.Invoke(items);
    }

    private void OnPetChanged()
    {
        if (_selectedPet is not { } pet)
            return;

        PetChanged?.Invoke(pet.Item1, pet.Item2);
    }

    private void PopulateCategoryItems(string filter)
    {
        CPatronAvailableItems.Clear();

        if (_activeCategory == null)
            return;

        foreach (var itemId in _activeCategory.Items)
        {
            if (!_prototypeMan.TryIndex<EntityPrototype>(itemId, out var itemProt))
                continue;

            if (!string.IsNullOrEmpty(filter) && !itemProt.Name.Contains(filter, StringComparison.OrdinalIgnoreCase))
                continue;

            if (_selectedItems.Contains(itemProt))
                continue;

            var spriteTextures = SpriteComponent.GetPrototypeTextures(itemProt, _resource).First();
            var sprite = spriteTextures.Default;

            var listItem = CPatronAvailableItems.AddItem(itemProt.Name, sprite);
            listItem.Metadata = itemProt;
        }
    }

    #endregion

    #region Pets

    private void InitializePets()
    {
        CPetsList.OnItemSelected += OnPetSelected;
        CPetName.OnTextChanged += _ => OnPetNameChanged();
    }

    private void OnPetSelected(ItemList.ItemListSelectedEventArgs args)
    {
        var item = CPetsList[args.ItemIndex];
        if (item.Metadata is not EntityPrototype petEntity)
            return;

        _selectedPet = (petEntity.ID, CPetName.Text);
        UpdatePetSprite(petEntity.ID);
        OnPetChanged();
    }

    private void OnPetNameChanged()
    {
        if (_selectedPet == null)
            return;

        _selectedPet = (_selectedPet.Value.Item1, CPetName.Text);
        OnPetChanged();
    }

    private void UpdatePetSprite(string petId)
    {
        if (_dummyPetPreview != null)
            _entMan.DeleteEntity(_dummyPetPreview);

        _dummyPetPreview = _entMan.SpawnEntity(petId, MapCoordinates.Nullspace);
        CPetSpriteView.SetEntity(_dummyPetPreview);
    }

    private void PopulatePets(string filter)
    {
        CPetsList.Clear();

        var prototypes = _prototypeMan.EnumeratePrototypes<SponsorPetCategory>();
        foreach (var category in prototypes)
        {
            if (_tier?.PetCategories.Contains(category) == false)
                continue;

            foreach (var petId in category.Pets)
            {
                if (!_prototypeMan.TryIndex<EntityPrototype>(petId, out var petPrototype))
                    continue;

                if (!petPrototype.Name.Contains(filter))
                    continue;

                var spriteTextures = SpriteComponent.GetPrototypeTextures(petPrototype, _resource).First();
                var sprite = spriteTextures.Default;

                var item = CPetsList.AddItem(petPrototype.Name, sprite);
                item.Metadata = petPrototype;
            }
        }
    }

    #endregion
}
