using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using Content.Client.UserInterface.Controls;
using Robust.Shared.Utility;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;

namespace Content.Client.Snackbar;

[GenerateTypedNameReferences]
[UsedImplicitly]
public sealed partial class SnackbarWindow : FancyWindow
{
    [Dependency] private readonly IGameTiming _gameTiming = default!;

    private readonly SnackbarEui _eui;
    private TimeSpan _startTime;
    private int duration = 30;

    public SnackbarWindow(SnackbarEui eui)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _eui = eui;
        CloseButton.Visible = false;
    }

    public void ShowSnackbar(int duration, string title, string message)
    {
        WindowTitle.Text = title;
        MessageSnackbar.SetMessage(FormattedMessage.FromMarkup(message));

        _startTime = _gameTiming.RealTime;
        this.duration = duration;
    }

    public FormattedMessage GetText(string text)
    {
        var formatted = new FormattedMessage(2);
        formatted.AddMarkup(text);
        formatted.Pop();

        return formatted;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        var curTime = _gameTiming.RealTime.TotalSeconds;
        var timeLeft = (curTime - _startTime.TotalSeconds) / duration;

        if(timeLeft >= 1f){
            _eui.SendClosedMessage();
            return;
        }

        Duration.Value = Math.Min(1, (float) timeLeft);
    }
}
