using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Shared.Prototypes;
using static Robust.Client.UserInterface.Controls.BaseButton;
using Content.Shared.Cargo.Prototypes;
using Content.Shared.RPSX.Bank.PDA.Components;
using Content.Client.Cargo.UI;
using System.Linq;
using Content.Shared.RPSX.Bank.PDA;
using Robust.Shared.Utility;
using Content.Shared.Cargo.Events;

namespace Content.Client.RPSX.Bank.PDA.UI.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class HeadShopUiFragment : BoxContainer
{
    private EntityUid _owner;
    private CargoConsoleOrderMenu _orderMenu;
    private string _userName = string.Empty;
    private int _orderCapacity;
    private BoundUserInterface? _boundUserInterface;

    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _protoManager = default!;
    private readonly SpriteSystem _spriteSystem;

    public event Action<ButtonEventArgs>? OnItemSelected;

    private readonly List<string> _categoryStrings = new();
    private string? _category;
    private CargoProductPrototype? _product;

    public HeadShopUiFragment()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _spriteSystem = _entityManager.System<SpriteSystem>();

        SearchBar.OnTextChanged += OnSearchBarTextChanged;
        Categories.OnItemSelected += OnCategoryItemSelected;

        var description = new FormattedMessage();
        _orderMenu = new CargoConsoleOrderMenu();

        OnItemSelected += (args) =>
        {
            if (args.Button.Parent is not CargoProductRow row)
                return;

            description.Clear();
            description.PushColor(Color.White); // Rich text default color is grey
            if (row.MainButton.ToolTip != null)
                description.AddText(row.MainButton.ToolTip);

            _orderMenu.Description.SetMessage(description);
            _product = row.Product;
            _orderMenu.ProductName.Text = row.ProductName.Text;
            _orderMenu.PointCost.Text = row.PointCost.Text;
            _orderMenu.Requester.Text = _userName;
            _orderMenu.Reason.Text = "";
            _orderMenu.Amount.Value = 1;

            _orderMenu.OpenCentered();
        };
        _orderMenu.SubmitButton.OnPressed += (_) =>
        {
            if (_boundUserInterface != null && AddOrder(_boundUserInterface))
            {
                _orderMenu.Close();
            }
        };
    }

    public void GetBUI(BoundUserInterface userInterface)
    {
        _boundUserInterface = userInterface;
    }

    private bool AddOrder(BoundUserInterface userInterface)
    {
        var orderAmt = _orderMenu?.Amount.Value ?? 0;
        if (orderAmt < 1 || orderAmt > _orderCapacity)
        {
            return false;
        }

        userInterface.SendMessage(new CargoConsoleAddOrderMessage(
            _orderMenu?.Requester.Text ?? "",
            _orderMenu?.Reason.Text ?? "",
            _product?.ID ?? "",
            orderAmt));

        return true;
    }

    private void OnCategoryItemSelected(OptionButton.ItemSelectedEventArgs args)
    {
        SetCategoryText(args.Id);
        PopulateProducts();
    }

    private void OnSearchBarTextChanged(LineEdit.LineEditEventArgs args)
    {
        PopulateProducts();
    }

    private void SetCategoryText(int id)
    {
        _category = id == 0 ? null : _categoryStrings[id];
        Categories.SelectId(id);
    }

    public void UpdateState(HeadShopCartridgeInterfaceState state)
    {
        _userName = state.OwnerName;
        _owner = _entityManager.GetEntity(state.Owner);
        _orderCapacity = state.Capacity;
        Populate();
        UpdateBankData(state.StationName, state.Balance);
    }

    public void Populate()
    {
        PopulateProducts();
        PopulateCategories();
    }

    public IEnumerable<CargoProductPrototype> ProductPrototypes
    {
        get
        {
            var allowedGroups = _entityManager.GetComponentOrNull<HeadShopCartridgeComponent>(_owner)?.AllowedGroups;

            foreach (var cargoPrototype in _protoManager.EnumeratePrototypes<CargoProductPrototype>())
            {
                if (!allowedGroups?.Contains(cargoPrototype.Group) ?? false)
                    continue;
                yield return cargoPrototype;
            }
        }

    }
    public void PopulateProducts()
    {
        Products.DisposeAllChildren();
        Products.RemoveAllChildren();
        var products = ProductPrototypes.ToList();
        products.Sort((x, y) =>
            string.Compare(x.Name, y.Name, StringComparison.CurrentCultureIgnoreCase));

        var search = SearchBar.Text.Trim().ToLowerInvariant();
        foreach (var prototype in products)
        {
            // if no search or category
            // else if search
            // else if category and not search
            if (search.Length == 0 && _category == null ||
                search.Length != 0 && prototype.Name.ToLowerInvariant().Contains(search) ||
                search.Length != 0 && prototype.Description.ToLowerInvariant().Contains(search) ||
                search.Length == 0 && _category != null && Loc.GetString(prototype.Category).Equals(_category))
            {
                var button = new CargoProductRow
                {
                    Product = prototype,
                    ProductName = { Text = prototype.Name },
                    MainButton = { ToolTip = prototype.Description },
                    PointCost = { Text = Loc.GetString("cargo-console-menu-points-amount", ("amount", prototype.Cost.ToString())) },
                    Icon = { Texture = _spriteSystem.Frame0(prototype.Icon) },
                };
                button.MainButton.OnPressed += args =>
                {
                    OnItemSelected?.Invoke(args);
                };
                Products.AddChild(button);
            }
        }
    }

    public void PopulateCategories()
    {
        _categoryStrings.Clear();
        Categories.Clear();

        foreach (var prototype in ProductPrototypes)
        {
            if (!_categoryStrings.Contains(Loc.GetString(prototype.Category)))
            {
                _categoryStrings.Add(Loc.GetString(prototype.Category));
            }
        }

        _categoryStrings.Sort();

        // Add "All" category at the top of the list
        _categoryStrings.Insert(0, Loc.GetString("cargo-console-menu-populate-categories-all-text"));

        foreach (var str in _categoryStrings)
        {
            Categories.AddItem(str);
        }
    }

    public void UpdateBankData(string name, int points)
    {
        AccountNameLabel.Text = name;
        PointsLabel.Text = Loc.GetString("cargo-console-menu-points-amount", ("amount", points.ToString()));
    }
}
