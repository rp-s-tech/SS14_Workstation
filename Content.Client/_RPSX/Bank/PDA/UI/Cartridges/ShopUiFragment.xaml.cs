using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Shared.Prototypes;
using static Robust.Client.UserInterface.Controls.BaseButton;
using System.Linq;
using Content.Shared.RPSX.Bank.PDA;
using Content.Shared.RPSX.Bank.Prototypes;
using Content.Shared.CartridgeLoader;
using Content.Shared.StationRecords;

namespace Content.Client.RPSX.Bank.PDA.UI.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class ShopUiFragment : BoxContainer
{
    private NetEntity _loaderUid;
    private GeneralStationRecord _record = new();
    private Dictionary<StoreProductPrototype, int> _basket = new();

    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _protoManager = default!;
    private readonly SpriteSystem _spriteSystem;

    public event Action<ButtonEventArgs>? OnItemSelected;
    public event Action<(NetEntity, StoreProductPrototype, int)>? OnBasketUpdated;
    public event Action<(NetEntity, GeneralStationRecord)>? OnBasketBuyed;

    private readonly List<string> _categoryStrings = new();
    private string? _category;
    private StoreProductPrototype? _selectedProduct;

    public ShopUiFragment()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _spriteSystem = _entityManager.System<SpriteSystem>();

        SearchBar.OnTextChanged += OnSearchBarTextChanged;
        Categories.OnItemSelected += OnCategoryItemSelected;

        OnItemSelected += (args) =>
        {
            if (args.Button.Parent is ShopProductRow row)
            {
                if (row.Product == null) return;
                DisableButtons(args.Button);
                args.Button.Pressed = !args.Button.Pressed;
                if (args.Button.Pressed)
                {
                    AddToBasket.Disabled = false;
                    _selectedProduct = row.Product;
                }
                else
                {
                    AddToBasket.Disabled = true;
                    _selectedProduct = null;
                }
            }
        };

        Basket.OnButtonDown += ChangeWindows;
        Main.OnButtonDown += ChangeWindows;

        AddToBasket.OnButtonDown += (args) =>
        {
            if (_selectedProduct == null) return;
            DisableButtons();
            if (int.TryParse(Count.Text, out int count))
            {
                AddToBasket.Disabled = true;
                OnBasketUpdated?.Invoke((_loaderUid, _selectedProduct, count));
            }
            Count.SetText(string.Empty);
        };
        BuyBasket.OnButtonDown += (args) => OnBasketBuyed?.Invoke((_loaderUid, _record));
    }

    private void ChangeWindows(ButtonEventArgs args)
    {
        MainWindow.Visible = !MainWindow.Visible;
        BasketWindow.Visible = !BasketWindow.Visible;
        Populate();
    }

    private void OnCategoryItemSelected(OptionButton.ItemSelectedEventArgs args)
    {
        SetCategoryText(args.Id);
        PopulateProducts();
    }

    private void DisableButtons(BaseButton without)
    {
        foreach (var product in Products.Children)
        {
            var button = product.Children.Where(c => c is Button && c != without).FirstOrDefault();
            if (button is Button btn)
                btn.Pressed = false;
        }
    }

    private void DisableButtons()
    {
        foreach (var product in Products.Children)
        {
            var button = product.Children.Where(c => c is Button).FirstOrDefault();
            if (button is Button btn)
                btn.Pressed = false;
        }
    }

    private void OnSearchBarTextChanged(LineEdit.LineEditEventArgs args)
    {
        PopulateProducts();
    }

    private void SetCategoryText(int id)
    {
        _category = id == 0 ? null : _categoryStrings[id];
        Categories.SelectId(id);
    }

    public void UpdateState(ShopCartridgeInterfaceState state)
    {
        _basket = state.Basket;
        _record = state.Record;
        _loaderUid = state.LoaderUid;
        Populate();
        UpdateBankData(state.Record.Name, state.Balance);
    }

    public void Populate()
    {
        PopulateProducts();
        PopulateCategories();
        PopulateBuyedProducts();
    }

    public IEnumerable<StoreProductPrototype> ProductPrototypes
    {
        get
        {
            foreach (var cargoPrototype in _protoManager.EnumeratePrototypes<StoreProductPrototype>())
            {
                yield return cargoPrototype;
            }
        }
    }

    public void PopulateProducts()
    {
        Products.DisposeAllChildren();
        Products.RemoveAllChildren();
        var products = ProductPrototypes.ToList();
        products.Sort((x, y) =>
            string.Compare(x.Name, y.Name, StringComparison.CurrentCultureIgnoreCase));

        var search = SearchBar.Text.Trim().ToLowerInvariant();
        foreach (var prototype in products)
        {
            // if no search or category
            // else if search
            // else if category and not search
            if (search.Length == 0 && _category == null ||
                search.Length != 0 && prototype.Name.ToLowerInvariant().Contains(search) ||
                search.Length != 0 && prototype.Description.ToLowerInvariant().Contains(search) ||
                search.Length == 0 && _category != null && Loc.GetString(prototype.Category).Equals(_category))
            {
                var button = new ShopProductRow
                {
                    Product = prototype,
                    ProductName = { Text = prototype.Name },
                    MainButton = { ToolTip = prototype.Description },
                    PointCost = { Text = Loc.GetString("cargo-console-menu-points-amount", ("amount", prototype.Cost.ToString())) },
                    Icon = { Texture = _spriteSystem.Frame0(prototype.Icon) },
                };
                button.MainButton.OnPressed += args =>
                {
                    OnItemSelected?.Invoke(args);
                };
                Products.AddChild(button);
            }
        }
    }

    public void PopulateBuyedProducts()
    {
        BuyedProducts.DisposeAllChildren();
        BuyedProducts.RemoveAllChildren();
        foreach ((StoreProductPrototype product, int count) in _basket)
        {
            if (count == 0) continue;
            var newProduct = new BuyedProductRow
            {
                Product = product,
                ProductName = { Text = product.Name, ToolTip = product.Description },
                PointCost = { Text = Loc.GetString("cargo-console-menu-points-amount", ("amount", (product.Cost * count).ToString())) },
                Icon = { Texture = _spriteSystem.Frame0(product.Icon) },
                CountEdit = { Text = count.ToString() },
            };
            newProduct.CountEdit.OnTextChanged += args =>
            {
                if (int.TryParse(args.Text, out int count))
                {
                    if (args.Control.Parent == null || args.Control.Parent.Parent is not BuyedProductRow row || row.Product == null) return;
                    OnBasketUpdated?.Invoke((_loaderUid, product, count));
                }
            };
            BuyedProducts.AddChild(newProduct);
        }
    }

    public void PopulateCategories()
    {
        _categoryStrings.Clear();
        Categories.Clear();

        foreach (var prototype in ProductPrototypes)
        {
            if (!_categoryStrings.Contains(Loc.GetString(prototype.Category)))
            {
                _categoryStrings.Add(Loc.GetString(prototype.Category));
            }
        }

        _categoryStrings.Sort();

        // Add "All" category at the top of the list
        _categoryStrings.Insert(0, Loc.GetString("cargo-console-menu-populate-categories-all-text"));

        foreach (var str in _categoryStrings)
        {
            Categories.AddItem(str);
        }
    }

    public void UpdateBankData(string name, int points)
    {
        AccountNameLabel.Text = name;
        PointsLabel.Text = Loc.GetString("cargo-console-menu-points-amount", ("amount", points.ToString()));
    }
}
