using System;
using System.Numerics;
using Content.Client.Resources;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Maths;
using Robust.Shared.Utility;

namespace Content.Client.RPSX.DarkForces.Narsi.Buildings.Altar.Abilities;

[GenerateTypedNameReferences]
public sealed partial class NarsiAbilityControl : Control
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IResourceCache _resourceCache = default!;

    private readonly SpriteSystem _spriteSystem;
    private readonly NarsiAbilitiesBoundInterface _bui;
    private readonly string _abilityId;

    public NarsiAbilityControl(string id, string name, string description, string levelDescription, int level,  int requiredBloodScore, SpriteSpecifier icon, ButtonState buttonState, NarsiAbilitiesBoundInterface bui)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _abilityId = id;
        _bui = bui;
        _spriteSystem = _entityManager.EntitySysManager.GetEntitySystem<SpriteSystem>();

        BindIcon(icon);
        BindLevelColor(level);
        BindTexts(name, description, levelDescription, level, requiredBloodScore);
        BindButton(buttonState);
    }

    private void BindButton(ButtonState buttonState)
    {
        var text = buttonState switch
        {
            ButtonState.ClosedLeader => "Открыть способность",
            ButtonState.ClosedNotEnoughPoints => "Недостаточно очков крови",
            ButtonState.ClosedNotLeader => "Открыть способность",
            ButtonState.Learn => "Вырезать символ на теле",
            _ => throw new ArgumentOutOfRangeException(nameof(buttonState), buttonState, null)
        };

        var isButtonDisabled = buttonState switch
        {
            ButtonState.ClosedLeader => false,
            ButtonState.ClosedNotLeader => true,
            ButtonState.ClosedNotEnoughPoints => true,
            ButtonState.Learn => false,
            _ => throw new ArgumentOutOfRangeException(nameof(buttonState), buttonState, null)
        };

        LearnButton.Text = text;
        LearnButton.Disabled = isButtonDisabled;
        LearnButton.OnPressed += _ =>
        {
            switch (buttonState)
            {
                case ButtonState.Learn:
                    _bui.OnAbilityLearn(_abilityId);
                    break;
                case ButtonState.ClosedLeader:
                    _bui.OnAbilityOpen(_abilityId);
                    break;
                case ButtonState.ClosedNotLeader:
                    break;
                case ButtonState.ClosedNotEnoughPoints:
                    break;
            }
        };

        if (!LearnButton.Disabled)
            return;

        var tooltip = new Tooltip();
        var tooltipText = buttonState switch
        {
            ButtonState.ClosedNotEnoughPoints => "Выполняйте задания, чтобы заработать очки крови",
            _ => "Только лидер может открывать способности"
        };
        tooltip.SetMessage(FormattedMessage.FromMarkup(tooltipText));

        LearnButton.TooltipSupplier = _ => tooltip;
        LearnButton.AddChild(new TextureRect
        {
            TextureScale = new Vector2(0.4f, 0.4f),
            Stretch = TextureRect.StretchMode.KeepCentered,
            Texture = _spriteSystem.Frame0(new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/Nano/lock.svg.192dpi.png"))),
            HorizontalExpand = true,
            HorizontalAlignment = HAlignment.Right,
        });
    }

    private void BindTexts(string name, string description, string levelDescription, int level, int requiredBloodScore)
    {
        Name.Text = name;
        Level.Text = $"{level}";
        Description.SetMessage(description);
        LevelDescription.SetMessage(levelDescription);
        RequiredBloodScore.Text = $"{requiredBloodScore}";

        var labelFont = _resourceCache.GetFont("/Fonts/NotoSansDisplay/NotoSansDisplay-Bold.ttf", 10);

        LevelLabel.FontOverride = labelFont;
        LevelDescriptionLabel.FontOverride = labelFont;
        RequiredBloodScoreLabel.FontOverride = labelFont;
        RequiredBloodScore.FontOverride = labelFont;
        DescriptionLabel.FontOverride = labelFont;
    }

    private void BindLevelColor(int level)
    {
        var color = level switch
        {
            1 => Color.Wheat,
            2 => Color.Orange,
            3 => Color.Violet,
            _ => Color.Wheat
        };
        Background.ModulateSelfOverride = color;
    }

    private void BindIcon(SpriteSpecifier icon)
    {
        Icon.Texture = _spriteSystem.Frame0(icon);
    }

    public enum ButtonState
    {
        ClosedLeader,
        ClosedNotEnoughPoints,
        ClosedNotLeader,
        Learn
    }
}
