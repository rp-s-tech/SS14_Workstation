using System;
using System.Collections.Generic;
using System.Numerics;
using Content.Client.Administration.UI.CustomControls;
using Content.Client.RPSX.Utils;
using Content.Client.Stylesheets;
using Content.Shared.RPSX.DarkForces.Vampire;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using Content.Shared.Mind;

namespace Content.Client.RPSX.DarkForces.Vampire;

[GenerateTypedNameReferences]
public sealed partial class VampireAbilitiesWindow : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private readonly SpriteSystem _spriteSystem;
    private readonly IEnumerable<VampireAbilitiesPrototype> _prototypes;

    private readonly Thickness _defaultMargin;

    public Action<EntProtoId?, string, int>? OnLearnButtonPressed;

    public VampireAbilitiesWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _prototypes = _prototypeManager.EnumeratePrototypes<VampireAbilitiesPrototype>();
        _spriteSystem = _entityManager.System<SpriteSystem>();

        _defaultMargin = new Thickness(8, 8, 8, 8);

        Title = Loc.GetString("vampire-abilities-title");
    }

    public void UpdateState(VampireAbilitiesState state)
    {
        StoreListingsContainer.Children.Clear();

        CurrentBloodLevel.SetMessage(state.CurrentBlood.ToString());
        TotalBloodLevel.SetMessage(state.TotalBlood.ToString());

        foreach (var (prototype, index) in _prototypes.WithIndex())
        {
            if (state.OpenedAbilities.Contains(prototype.ActionId))
                continue;

            var panel = GetPanelContainer(index);

            var mainContainer = GetBoxContainer(BoxContainer.LayoutOrientation.Vertical);
            var innerContainer = GetBoxContainer(BoxContainer.LayoutOrientation.Vertical);

            panel.AddChild(mainContainer);
            mainContainer.AddChild(GetHeader(prototype.Icon, prototype.Name, prototype.BloodCost));
            mainContainer.AddChild(GetHorizontalDivider());
            mainContainer.AddChild(innerContainer);

            var button = GetButton(Loc.GetString("vampire-abilities-learn"), state.CurrentBlood >= prototype.BloodCost);
            button.OnPressed += _ => OnLearnButtonPressed?.Invoke(prototype.ReplaceId, prototype.ActionId, prototype.BloodCost);

            innerContainer.AddChild(GetDescription(prototype.Description));
            innerContainer.AddChild(button);

            StoreListingsContainer.AddChild(panel);
        }
    }

    private Control GetHorizontalDivider()
    {
        return new HSeparator
        {
            Margin = _defaultMargin
        };
    }


    private BoxContainer GetHeader(SpriteSpecifier icon, string name, int bloodCost)
    {
        var mainContainer = GetBoxContainer(BoxContainer.LayoutOrientation.Horizontal);
        var textContainer = GetBoxContainer(BoxContainer.LayoutOrientation.Vertical);

        mainContainer.AddChild(GetTextureRect(icon));
        mainContainer.AddChild(textContainer);

        textContainer.AddChild(GetTitle(name));
        textContainer.AddChild(GetBloodCost(bloodCost));

        return mainContainer;
    }

    private BoxContainer GetTitle(string name)
    {
        var container = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal
        };

        var label = new Label
        {
            Text = Loc.GetString("vampire-abilities-name"),
            StyleClasses = {StyleNano.StyleClassLabelKeyText},
            Margin = new Thickness(8, 0, 0, 0),
            HorizontalExpand = true
        };

        var nameLabel = new Label();
        nameLabel.Text = Loc.GetString(name);

        container.AddChild(label);
        container.AddChild(nameLabel);

        return container;
    }

    private BoxContainer GetBloodCost(int bloodCost)
    {
        var container = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal
        };

        var label = new Label
        {
            Text = Loc.GetString("vampire-abilities-bloodrequired"),
            StyleClasses = {StyleNano.StyleClassLabelKeyText},
            Margin = new Thickness(8, 0, 0, 0),
            HorizontalExpand = true
        };

        var bloodCostLabel = new Label();
        bloodCostLabel.Text = bloodCost.ToString();

        container.AddChild(label);
        container.AddChild(bloodCostLabel);

        return container;
    }

    private PanelContainer GetPanelContainer(int index)
    {
        return new PanelContainer
        {
            PanelOverride = new StyleBoxFlat
            {
                BackgroundColor = index % 2 == 0 ? Color.FromHex("#2F2F2F") : Color.FromHex("#1E1E22"),
                BorderColor = Color.FromHex("#1E1E22"),
            },
            Margin = _defaultMargin
        };
    }

    private BoxContainer GetBoxContainer(BoxContainer.LayoutOrientation orientation)
    {
        return new BoxContainer
        {
            Orientation = orientation,
            Margin = _defaultMargin
        };
    }

    private TextureRect GetTextureRect(SpriteSpecifier icon)
    {
        return new TextureRect
        {
            Texture = _spriteSystem.Frame0(icon),
            TextureScale = new Vector2(1.5f, 1.5f),
            Stretch = TextureRect.StretchMode.KeepCentered
        };
    }

    private RichTextLabel GetDescription(string description)
    {
        var label = new RichTextLabel();
        label.SetMessage(FormattedMessage.FromMarkup(Loc.GetString(description)));

        return label;
    }

    private Button GetButton(string text, bool enabled)
    {
        return new Button
        {
            Text = text,
            HorizontalAlignment = HAlignment.Left,
            Margin = new Thickness(0, 8, 0, 0),
            Disabled = !enabled
        };
    }
}
