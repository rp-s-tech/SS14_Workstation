using System.Numerics;
using Content.Shared.RPSX.FastUI;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.RPSX.FastUI;

[GenerateTypedNameReferences]
public sealed partial class SecretListingListing : Control
{
    public event Action<BaseButton.ButtonEventArgs, ListingData, string>? OnListingButtonPressed;

    public SecretListingListing(ListingData data, string key, SpriteSystem spriteSystem, IEntityManager entityManager, int pos)
    {
        RobustXamlLoader.Load(this);

        ItemName.Text = data.Title;

        ItemDescription.SetMessage(data.Description);
        ItemSubDescription.Text = data.SubDescription;

        SetupButton(data, key);
        SetupImage(data, entityManager, spriteSystem);
        SetupBackground(pos);
    }

    private void SetupBackground(int pos)
    {
        if (pos % 2 == 0)
        {
            Panel.PanelOverride = new StyleBoxFlat()
            {
                BackgroundColor = Color.FromHex("#2F2F2F"),
                BorderColor = Color.FromHex("#1E1E22")
            };
        }
        else
        {
            Panel.PanelOverride = new StyleBoxFlat()
            {
                BackgroundColor = Color.FromHex("#25252A"),
                BorderColor = Color.FromHex("#1E1E22")
            };
        }
    }

    private void SetupButton(ListingData data, string key)
    {
        switch (data.ButtonState)
        {
            case ButtonState.Enabled:
                ItemButton.Text = data.ButtonText;
                ItemButton.Disabled = false;
                ItemButton.OnPressed += args => OnListingButtonPressed?.Invoke(args, data, key);

                break;
            case ButtonState.Disabled:
                ItemButton.Text = data.ButtonText;
                ItemButton.Disabled = true;

                break;
            case ButtonState.Hided:
                InfoContainer.RemoveChild(ItemButton);
                break;
        }
    }

    private void SetupImage(ListingData data, IEntityManager entityManager, SpriteSystem spriteSystem)
    {
        if (!EntityUid.TryParse(data.ID, out var uid))
        {
            var icon = data.Icon != null ? spriteSystem.Frame0(data.Icon) : null;
            ItemTexture.Texture = icon;

            return;
        }

        if (entityManager.HasComponent<SpriteComponent>(uid))
        {
            Container.RemoveChild(ItemTexture);

            var view = new SpriteView
            {
                OverrideDirection = Direction.South,
                Scale = new Vector2(2f, 2f),
                MinSize = new Vector2(64, 64),
                Margin = new Thickness(8),
            };

            Container.AddChild(view);

            view.SetEntity(uid);
            view.SetPositionFirst();
        }
    }
}
